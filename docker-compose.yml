version: "3.8"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:

### AWS EB-CLI ################################################
  aws:
    build:
      context: ./aws-cli
    env_file: .env
    volumes:
      - ${HOME}/.aws:/root/.aws:ro
    tty: true

  api:
    container_name: nginx
    image: nginx:1.17
    restart: always
    env_file: .env
    depends_on:
      - php
    links:
      - php
    volumes:
      - ${APP_PATH}:${APP_CODE_PATH_CONTAINER}
      - ${HOME}/.aws/credentials:/var/www/.aws/credentials:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/default.conf
      - cachedata:${APP_CODE_PATH_CONTAINER}/var/cache
    ports:
      - "80:80"
    networks:
      - frontend
      - backend

  php:
    build:
      context: ./php
    restart: always
    env_file: .env
    working_dir: ${APP_CODE_PATH_CONTAINER}
    volumes:
      - ${APP_PATH}:${APP_CODE_PATH_CONTAINER}
      - ${HOME}/.aws/credentials:/var/www/.aws/credentials:ro
      - ./php/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
    expose:
      - "9000"
    networks:
      - backend

  postgresql:
    image: postgres:12.3
    container_name: postgresql
    env_file: .env
    restart: always
    command: postgres -c tcp_keepalives_idle=60 -c tcp_keepalives_interval=60 -c tcp_keepalives_count=60
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      #- ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${DATA_PATH_HOST}/postgresql:/var/lib/postgresql/data
    networks:
      - frontend
      - backend

  ### pgAdmin ##############################################
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - "PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}"
      - "PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}"
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - ${DATA_PATH_HOST}/pgadmin:/var/lib/pgadmin
    depends_on:
      - postgresql
    networks:
      - frontend
      - backend

  assets:
    build:
      context: ./assets
    env_file: .env
    volumes:
      - ${APP_PATH}/.nvmrc:/.nvmrc
      - ${APP_PATH}/package.json:/package.json
      - ${APP_PATH}/bower.json:/bower.json
      - ${HOME}/.npm:/.npm
    command: "npm install && bower install && node_modules/grunt/bin/grunt"

  mailhog:
    image: mailhog/mailhog
    ports:
        - "1025:1025"
        - "8025:8025"
    networks:
      - frontend
      - backend

### SQS #############################################
  sqs:
    build: ./sqs
    ports:
      - "${SQS_NODE_HOST_PORT}:9324"
      - "${SQS_MANAGEMENT_HTTP_HOST_PORT}:9325"
    privileged: true
    hostname: laradock-sqs
    volumes:
      - ${DATA_PATH_HOST}/sqs:/opt/custom
    networks:
      - backend

### Minio ################################################
  minio:
    build: ./minio
    volumes:
      - ${DATA_PATH_HOST}/minio/data:/export
      - ${DATA_PATH_HOST}/minio/config:/root/.minio
    ports:
      - "${MINIO_PORT}:9000"
    environment:
      - MINIO_ACCESS_KEY=access
      - MINIO_SECRET_KEY=secretkey
    networks:
      - frontend
      - backend

  redis:
    image: redis:5.0.7
    hostname: redis
    volumes:
      - "${DATA_PATH_HOST}/redis:/data"
    networks:
      - backend

  composer:
    image: composer:1.10
    working_dir: ${APP_CODE_PATH_CONTAINER}
    env_file: .env
    environment:
      SSH_AUTH_SOCK: /ssh-auth.sock
    volumes:
      - ${APP_PATH}:${APP_CODE_PATH_CONTAINER}
      - "$SSH_AUTH_SOCK:/ssh-auth.sock"
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    command: composer install --ignore-platform-reqs --no-scripts
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - discovery.type=single-node
    ports:
        - "9200:9200"
        - "9300:9300"
    volumes:
      - "elasticdata:/usr/share/elasticsearch/data"
    networks:
      - backend

### Certbot #########################################
  # certbot:
  #   build:
  #     context: ./certbot
  #   volumes:
  #     - ./data/certbot/certs/:/var/certs
  #     - ./certbot/letsencrypt/:/var/www/letsencrypt
  #   environment:
  #     - CN="apidev.viddyoze.com"
  #     - EMAIL="fake.email@gmail.com"
  #   networks:
  #     - frontend

### SWAGGER EDITOR ############################################
#   swagger-editor:
#     build: ./swagger-editor
#     ports:
#       - ${SWAGGER_EDITOR_PORT}:8080
#     networks:
#       - backend

# ### SWAGGER UI ################################################
#   swagger-ui:
#     build: ./swagger-ui
#     environment:
#       - API_URL=${SWAGGER_API_URL}
#     ports:
#       - ${SWAGGER_UI_PORT}:8080
#     networks:
#       - backend

volumes:
  cachedata:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  elasticdata:
    driver: ${VOLUMES_DRIVER}